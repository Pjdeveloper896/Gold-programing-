
(function (global, factory) {
  if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = factory(); // Node.js / CommonJS
  } else {
    global.Gold = factory(); // Browser global
  }
})(typeof window !== "undefined" ? window : this, function () {
  class Gold {
    constructor() {
      this.vars = {};
      this.bindings = {};
      this.watchers = {};
      this.types = {};
    }
    type(n, t) {
      this.types[n] = t;
    }
    print(x) {
      console.log("[Gold]", x);
    }
    err(e) {
      console.error("[Gold Error]", e);
    }
    set(n, v) {
      if (this.types[n] && typeof v !== this.types[n]) {
        this.err(`TypeError: Expected ${this.types[n]}, got ${typeof v}`);
        return;
      }
      this.vars[n] = v;
      if (this.bindings[n]) {
        const el = document.getElementById(this.bindings[n]);
        if (el) el.innerText = v;
      }
      if (this.watchers[n]) {
        this.watchers[n].forEach(cb => cb(v));
      }
    }
    get(n) {
      return this.vars[n];
    }
    bind(n, id) {
      this.bindings[n] = id;
      const el = document.getElementById(id);
      if (el) el.innerText = this.vars[n];
    }
    eventWatch(n, cb) {
      if (!this.watchers[n]) this.watchers[n] = [];
      this.watchers[n].push(cb);
    }
    goldCode(code) {
      try {
        new Function("gold", code)(this);
      } catch (e) {
        this.err(e);
      }
    }
    goldArray(...items) {
      const hist = [], arr = [...items];
      return {
        push: i => { hist.push([...arr]); arr.push(i); },
        pop: () => { hist.push([...arr]); return arr.pop(); },
        rollback: () => { if (hist.length) { const p = hist.pop(); arr.length = 0; arr.push(...p); } },
        get: () => arr
      };
    }
    goldObject(obj) {
      const log = [];
      const proxy = new Proxy(obj, {
        set(t, k, v) {
          log.push({ key: k, from: t[k], to: v });
          t[k] = v;
          return true;
        }
      });
      proxy._log = () => log;
      return proxy;
    }
    goldFunc(meta, fn) {
      fn.meta = meta;
      return fn;
    }
    customFetch(url, onDone, onFail) {
      this.set("loading", true);
      fetch(url).then(r => r.json()).then(d => {
        this.set("loading", false);
        onDone(d);
      }).catch(e => {
        this.set("loading", false);
        this.err(e);
        if (onFail) onFail(e);
      });
    }
  }
  return Gold;
});
const gold = new Gold();
